local distance_esp =
{
    m_iHealth = nil,
    fov = 15,
    distance = 150,
    fovAngle = 50
}

function distance_esp.Initialize()
    constellation.windows.overlay.create("Valve001", "")

end

function distance_esp.OnConstellationCalibrated()
    distance_esp.m_iHealth = constellation.memory.netvar("DT_BasePlayer", "m_iHealth")
end

function distance_esp.OnConstellationTick(localplayer, localweapon, viewangles)
    if localplayer == nil then return end
    if not constellation.game.bsp.parse() then return end

    local player_information = constellation.game.get_player(localplayer)

    if player_information == nil then return end

    for _, player in pairs(constellation.game.get_enemies()) do
        local dimensions = constellation.game.get_box_dimensions(player)
        local is_close, direction = constellation.game.is_in_fov(player, distance_esp.fov)
        local health = constellation.memory.read_integer(player["address"] + distance_esp.m_iHealth)
        local ScreenSize = health * 34
        local result = constellation.game.bsp.trace_ray(
            player_information["eye_position"]["x"], player_information["eye_position"]["y"],
            player_information["eye_position"]["z"],
            player["eye_position"]["x"], player["eye_position"]["y"], player["eye_position"]["z"]
        )
        local is_close, direction = constellation.game.is_in_fov(player, distance_esp.fov)

        local distance = math.sqrt(
            math.pow(
                (player.origin.x - player_information.origin.x),
                2
            )
            +
            math.pow(
                (player.origin.y - player_information.origin.y),
                2
            )
        )
        local fovAngle = 50

        if is_close then
            if constellation.game.is_in_fov(player, fovAngle) and result then
                if health > 75 then
                    constellation.windows.overlay.box_filled(0, 0, ScreenSize, 20,
                        { r = 0, g = 255, b = 0, a = 150 })
                end
                if health >= 40 and health <= 75 then
                    constellation.windows.overlay.box_filled(0, 0, ScreenSize, 20,
                        { r = 255, g = 100, b = 0, a = 150 })
                end
                if health < 40 then
                    constellation.windows.overlay.box_filled(0, 0, ScreenSize, 20,
                        { r = 255, g = 0, b = 0, a = 150 })
                end

                local dimensions = constellation.game.get_box_dimensions(player)
                if distance >= 1 and distance <= 500 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 0, g = 255, b = 0, a = 0 },
                            { r = 0, g = 255, b = 0, a = 175 })
                    end
                end

                if distance >= 501 and distance <= 1000 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 0, g = 255, b = 0, a = 0 },
                            { r = 0, g = 255, b = 0, a = 140 })
                    end
                end

                if distance >= 1000 and distance <= 1500 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 255, g = 0, b = 0, a = 0 },
                            { r = 0, g = 255, b = 0, a = 100 })
                    end
                end

                if distance >= 1500 and distance <= 2500 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 255, g = 255, b = 255, a = 0 },
                            { r = 255, g = 255, b = 255, a = 50 })
                    end
                end
            end

            if constellation.game.is_in_fov(player, fovAngle) and not result then
                if health > 75 then
                    constellation.windows.overlay.box_filled(0, 0, ScreenSize, 20,
                        { r = 0, g = 255, b = 0, a = 150 })
                end
                if health >= 40 and health <= 75 then
                    constellation.windows.overlay.box_filled(0, 0, ScreenSize, 20,
                        { r = 255, g = 100, b = 0, a = 150 })
                end
                if health < 40 then
                    constellation.windows.overlay.box_filled(0, 0, ScreenSize, 20,
                        { r = 255, g = 0, b = 0, a = 150 })
                end

                local dimensions = constellation.game.get_box_dimensions(player)
                -- Code from here till ::end-notation (line 160) checks distance and the puts a  FILLED box with no border over the enemy.
                if distance >= 1 and distance <= 500 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 255, g = 0, b = 0, a = 65 },
                            { r = 255, g = 0, b = 0, a = 175 })
                    end
                end

                if distance >= 501 and distance <= 1000 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 255, g = 0, b = 0, a = 45 },
                            { r = 255, g = 0, b = 0, a = 0 })
                    end
                end

                if distance >= 1000 and distance <= 1500 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 255, g = 0, b = 0, a = 40 },
                            { r = 255, g = 0, b = 0, a = 0 })
                    end
                end

                if distance >= 1500 and distance <= 2500 then
                    if dimensions ~= nil then
                        constellation.windows.overlay.box_filled_outlined(dimensions["left"], dimensions["top"],
                            dimensions["right"],
                            dimensions["bottom"] + 1, 2, { r = 255, g = 0, b = 0, a = 25 },
                            { r = 255, g = 0, b = 0, a = 0 })
                    end
                end
            end
            -- ::end-notation
        end
    end
end

return distance_esp
